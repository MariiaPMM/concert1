const express = require('express');
const router = express.Router();
const { db } = require('../db');
const jwt = require('jsonwebtoken');

const JWT_SECRET = process.env.JWT_SECRET || 'secret';

// üîê Middleware –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

function authMiddleware(req, res, next) {
	const authHeader = req.headers.authorization;
	if (!authHeader || !authHeader.startsWith('Bearer ')) {
		return res.status(401).json({ error: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω' });
	}

	const token = authHeader.split(' ')[1];
	try {
		const decoded = jwt.verify(token, JWT_SECRET);
		if (!decoded.id) {
			return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –º—ñ—Å—Ç–∏—Ç—å id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
		}
		req.user = decoded;
		next();
	} catch (err) {
		return res.status(401).json({ error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω' });
	}
}

// ‚úÖ –ö—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫ (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ü–ï–†–®–ò–ú, —â–æ–± –Ω–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞–≤ –∑ :concertId)
router.post('/buy', authMiddleware, async (req, res) => {
	const { concertId, seatId } = req.body;

	if (!concertId || !seatId) {
		return res
			.status(400)
			.json({ error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ concertId —ñ seatId' });
	}

	try {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º—ñ—Å—Ü–µ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ
		const [existing] = await db.execute(
			`SELECT id FROM tickets WHERE concert_id = ? AND seat_id = ? AND status = '–¥—ñ–π—Å–Ω–∏–π'`,
			[concertId, seatId]
		);

		if (existing.length > 0) {
			return res.status(400).json({ error: '–¶–µ –º—ñ—Å—Ü–µ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ' });
		}

		// –í—Å—Ç–∞–≤–ª—è—î–º–æ –∫–≤–∏—Ç–æ–∫ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–µ–¥—ñ–π—Å–Ω–∏–π" (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –ª–æ–≥—ñ–∫—É)
		await db.execute(
			`INSERT INTO tickets (concert_id, seat_id, user_id, status) VALUES (?, ?, ?, '–Ω–µ–¥—ñ–π—Å–Ω–∏–π')`,
			[concertId, seatId, req.user.id]
		);

		res.json({ success: true, message: '–ö–≤–∏—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ' });
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –∫–≤–∏—Ç–∫–∞:', err);
		res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∫—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫' });
	}
});

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º—ñ—Å—Ü—è –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç—É
router.get('/:concertId', async (req, res) => {
	const concertId = req.params.concertId;

	if (!concertId) {
		return res.status(400).json({ error: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ concertId' });
	}

	try {
		const [seats] = await db.execute(
			`
			SELECT seats.id, seats.seat_number,
				EXISTS (
					SELECT 1 FROM tickets
					WHERE tickets.seat_id = seats.id AND tickets.status = '–¥—ñ–π—Å–Ω–∏–π'
				) AS taken
			FROM seats
			WHERE seats.concert_id = ?
			ORDER BY seats.seat_number ASC
		`,
			[concertId]
		);

		res.json(seats);
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ü—å:', err);
		res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ü—å' });
	}
});

module.exports = router;
