const express = require('express');
const router = express.Router();
const QRCode = require('qrcode');
const { db, getTicketById, markTicketAsSold } = require('../db');
const authMiddleware = require('../middleware/auth');

// ü™ë –î–æ–¥–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏
router.post('/cart/add', authMiddleware, async (req, res) => {
  try {
    const { ticketId } = req.body;
    const userId = req.user.id;

    await db.execute(
      'UPDATE tickets SET user_id = ?, status = ? WHERE id = ?',
      [userId, '–Ω–µ–¥—ñ–π—Å–Ω–∏–π', ticketId]
    );

    res.json({ message: '–ö–≤–∏—Ç–æ–∫ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏' });
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏:', err);
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏' });
  }
});

// üõí –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/cart', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;

    const [tickets] = await db.execute(
      `SELECT 
        t.id, concerts.name AS concertName, seats.seat_number AS seatNumber, concerts.price, t.status, concerts.date
      FROM tickets t
      JOIN concerts ON t.concert_id = concerts.id
      JOIN seats ON t.seat_id = seats.id
      WHERE t.user_id = ? AND status = '–Ω–µ–¥—ñ–π—Å–Ω–∏–π'`,
      [userId]
    );

    res.json(tickets);
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∑–∏–Ω–∏:', err);
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É' });
  }
});

// ‚úÖ –ö—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫ –∑ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é QR-–∫–æ–¥—É
router.post('/cart/buy/:id', authMiddleware, async (req, res) => {
  try {
    const ticketId = req.params.id;
    const userId = req.user.id;

    const ticket = await getTicketById(ticketId);

    if (!ticket) {
      return res.status(404).json({ error: '–ö–≤–∏—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (ticket.user_id !== userId) {
      return res.status(403).json({ error: '–¶–µ–π –∫–≤–∏—Ç–æ–∫ –≤–∞–º –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å' });
    }

    if (ticket.status === '–¥—ñ–π—Å–Ω–∏–π') {
      return res.status(400).json({ error: '–ö–≤–∏—Ç–æ–∫ –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–∏–π' });
    }

    await markTicketAsSold(ticketId, userId);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ QR-–∫–æ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–≤–∏—Ç–∫–∞)
    const qrData = `https://your-site.com/tickets/${ticketId}`;
    const qrCodeDataUrl = await QRCode.toDataURL(qrData);

    res.json({ message: '–ö–≤–∏—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ', qrCode: qrCodeDataUrl });
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ –∫–≤–∏—Ç–∫–∞:', err);
    res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∫—É–ø—ñ–≤–ª—é' });
  }
});

module.exports = router;
