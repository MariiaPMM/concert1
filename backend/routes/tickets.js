const express = require('express');
const jwt = require('jsonwebtoken');
const db = require('../db');
const router = express.Router();

const JWT_SECRET = process.env.JWT_SECRET || 'secret';

// üîê Middleware –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
function authMiddleware(req, res, next) {
	const authHeader = req.headers.authorization;
	if (!authHeader || !authHeader.startsWith('Bearer ')) {
		return res
			.status(401)
			.json({ error: '–ù–µ–º–∞—î –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó' });
	}

	const token = authHeader.split(' ')[1];
	try {
		const decoded = jwt.verify(token, JWT_SECRET);
		if (!decoded?.id) {
			return res.status(403).json({ error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ID' });
		}
		req.user = decoded;
		next();
	} catch (err) {
		return res.status(403).json({ error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω' });
	}
}

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get('/cart', authMiddleware, async (req, res) => {
	try {
		const [rows] = await db.execute(
			`SELECT 
        t.id, concerts.name AS concertName, seats.seat_number AS seatNumber, concerts.price, t.status
      FROM tickets t
      JOIN concerts ON t.concert_id = concerts.id
      JOIN seats ON t.seat_id = seats.id
      WHERE t.user_id = ? AND status = '–Ω–µ–¥—ñ–π—Å–Ω–∏–π'`,
			[req.user.id]
		);
		res.json(rows);
	} catch (err) {
		res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
	}
});

// ‚úÖ –ö—É–ø–∏—Ç–∏ –æ–¥–∏–Ω –∫–≤–∏—Ç–æ–∫ —ñ–∑ –∫–æ—Ä–∑–∏–Ω–∏
router.post('/cart/buy/:ticketId', authMiddleware, async (req, res) => {
	try {
		const [result] = await db.execute(
			`UPDATE tickets 
       SET status = '–¥—ñ–π—Å–Ω–∏–π' 
       WHERE id = ? AND user_id = ? AND status = '–Ω–µ–¥—ñ–π—Å–Ω–∏–π'`,
			[req.params.ticketId, req.user.id]
		);

		if (result.affectedRows === 0) {
			return res
				.status(404)
				.json({ error: '–ö–≤–∏—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∫—É–ø–ª–µ–Ω–æ' });
		}

		res.json({ message: '–ö–≤–∏—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ' });
	} catch (err) {
		res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
	}
});

// ‚úÖ –ö—É–ø–∏—Ç–∏ –≤—Å—ñ –∫–≤–∏—Ç–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω—ñ
router.post('/cart/checkout', authMiddleware, async (req, res) => {
	try {
		const [result] = await db.execute(
			`UPDATE tickets
         SET status = '–¥—ñ–π—Å–Ω–∏–π'
       WHERE user_id = ? AND status = '–Ω–µ–¥—ñ–π—Å–Ω–∏–π'`,
			[req.user.id]
		);

		if (result.affectedRows === 0) {
			return res
				.status(400)
				.json({ message: '–£ –∫–æ—Ä–∑–∏–Ω—ñ –Ω–µ–º–∞—î –∫–≤–∏—Ç–∫—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏' });
		}

		res.json({
			message: `–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞. –ö—É–ø–ª–µ–Ω–æ –∫–≤–∏—Ç–∫—ñ–≤: ${result.affectedRows}`,
		});
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ –∫–≤–∏—Ç–∫—ñ–≤:', err);
		res.status(500).json({ error: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–ø–ª–∞—Ç–∏' });
	}
});

// ‚úÖ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫ –∑ –∫–æ—Ä–∑–∏–Ω–∏
router.delete('/cart/:id', authMiddleware, async (req, res) => {
	try {
		const [result] = await db.execute(
			`DELETE FROM tickets 
       WHERE id = ? AND user_id = ? AND status = '–Ω–µ–¥—ñ–π—Å–Ω–∏–π'`,
			[req.params.id, req.user.id]
		);

		if (result.affectedRows === 0) {
			return res
				.status(404)
				.json({ error: '–ö–≤–∏—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∫—É–ø–ª–µ–Ω–æ' });
		}

		res.json({ message: '–ö–≤–∏—Ç–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—Ä–∑–∏–Ω–∏' });
	} catch (err) {
		res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
	}
});

module.exports = router;
